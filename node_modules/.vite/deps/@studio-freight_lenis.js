import "./chunk-RSJERJUL.js";

// node_modules/@studio-freight/lenis/dist/lenis.modern.mjs
function t(t2, e2, i2) {
  return Math.max(t2, Math.min(e2, i2));
}
var e = class {
  advance(e2) {
    var i2;
    if (!this.isRunning)
      return;
    let s2 = false;
    if (this.lerp)
      this.value = (1 - (o2 = this.lerp)) * this.value + o2 * this.to, Math.round(this.value) === this.to && (this.value = this.to, s2 = true);
    else {
      this.currentTime += e2;
      const i3 = t(0, this.currentTime / this.duration, 1);
      s2 = i3 >= 1;
      const o3 = s2 ? 1 : this.easing(i3);
      this.value = this.from + (this.to - this.from) * o3;
    }
    var o2;
    null == (i2 = this.onUpdate) || i2.call(this, this.value, { completed: s2 }), s2 && this.stop();
  }
  stop() {
    this.isRunning = false;
  }
  fromTo(t2, e2, { lerp: i2 = 0.1, duration: s2 = 1, easing: o2 = (t3) => t3, onUpdate: n2 }) {
    this.from = this.value = t2, this.to = e2, this.lerp = i2, this.duration = s2, this.easing = o2, this.currentTime = 0, this.isRunning = true, this.onUpdate = n2;
  }
};
var i = () => ({ events: {}, emit(t2, ...e2) {
  let i2 = this.events[t2] || [];
  for (let t3 = 0, s2 = i2.length; t3 < s2; t3++)
    i2[t3](...e2);
}, on(t2, e2) {
  var i2;
  return (null == (i2 = this.events[t2]) ? void 0 : i2.push(e2)) || (this.events[t2] = [e2]), () => {
    var i3;
    this.events[t2] = null == (i3 = this.events[t2]) ? void 0 : i3.filter((t3) => e2 !== t3);
  };
} });
var s = class {
  constructor(t2) {
    this.onResize = ([t3]) => {
      if (t3) {
        const { width: e2, height: i2 } = t3.contentRect;
        this.width = e2, this.height = i2;
      }
    }, this.onWindowResize = () => {
      this.width = window.innerWidth, this.height = window.innerHeight;
    }, this.element = t2, t2 === window ? (window.addEventListener("resize", this.onWindowResize), this.onWindowResize()) : (this.width = this.element.offsetWidth, this.height = this.element.offsetHeight, this.resizeObserver = new ResizeObserver(this.onResize), this.resizeObserver.observe(this.element));
  }
  destroy() {
    window.removeEventListener("resize", this.onWindowResize), this.resizeObserver.disconnect();
  }
};
var o = class {
  constructor(e2, { wheelMultiplier: s2 = 1, touchMultiplier: o2 = 2, normalizeWheel: n2 = false }) {
    this.onTouchStart = (t2) => {
      const { pageX: e3, pageY: i2 } = t2.targetTouches ? t2.targetTouches[0] : t2;
      this.touchStart.x = e3, this.touchStart.y = i2;
    }, this.onTouchMove = (t2) => {
      const { pageX: e3, pageY: i2 } = t2.targetTouches ? t2.targetTouches[0] : t2, s3 = -(e3 - this.touchStart.x) * this.touchMultiplier, o3 = -(i2 - this.touchStart.y) * this.touchMultiplier;
      this.touchStart.x = e3, this.touchStart.y = i2, this.emitter.emit("scroll", { type: "touch", deltaX: s3, deltaY: o3, event: t2 });
    }, this.onWheel = (e3) => {
      let { deltaX: i2, deltaY: s3 } = e3;
      this.normalizeWheel && (i2 = t(-100, i2, 100), s3 = t(-100, s3, 100)), i2 *= this.wheelMultiplier, s3 *= this.wheelMultiplier, this.emitter.emit("scroll", { type: "wheel", deltaX: i2, deltaY: s3, event: e3 });
    }, this.element = e2, this.wheelMultiplier = s2, this.touchMultiplier = o2, this.normalizeWheel = n2, this.touchStart = { x: null, y: null }, this.emitter = i(), this.element.addEventListener("wheel", this.onWheel, { passive: false }), this.element.addEventListener("touchstart", this.onTouchStart, { passive: false }), this.element.addEventListener("touchmove", this.onTouchMove, { passive: false });
  }
  on(t2, e2) {
    return this.emitter.on(t2, e2);
  }
  destroy() {
    this.emitter.events = {}, this.element.removeEventListener("wheel", this.onWheel, { passive: false }), this.element.removeEventListener("touchstart", this.onTouchStart, { passive: false }), this.element.removeEventListener("touchmove", this.onTouchMove, { passive: false });
  }
};
var n = class {
  constructor({ direction: t2, gestureDirection: n2, mouseMultiplier: l, smooth: r, wrapper: h = window, content: a = document.documentElement, smoothWheel: c = null == r || r, smoothTouch: u = false, duration: m, easing: p = (t3) => Math.min(1, 1.001 - Math.pow(2, -10 * t3)), lerp: d = m ? null : 0.1, infinite: v = false, orientation: g = null != t2 ? t2 : "vertical", gestureOrientation: S = null != n2 ? n2 : "vertical", touchMultiplier: w = 2, wheelMultiplier: f = null != l ? l : 1, normalizeWheel: M = true } = {}) {
    this.onVirtualScroll = ({ type: t3, deltaX: e2, deltaY: i2, event: s2 }) => {
      if (s2.ctrlKey)
        return;
      if ("vertical" === this.options.gestureOrientation && 0 === i2 || "horizontal" === this.options.gestureOrientation && 0 === e2)
        return;
      if (s2.composedPath().find((t4) => null == t4 || null == t4.hasAttribute ? void 0 : t4.hasAttribute("data-lenis-prevent")))
        return;
      if (this.isStopped || this.isLocked)
        return void s2.preventDefault();
      if (this.isSmooth = this.options.smoothTouch && "touch" === t3 || this.options.smoothWheel && "wheel" === t3, !this.isSmooth)
        return this.isScrolling = false, void this.animate.stop();
      s2.preventDefault();
      let o2 = i2;
      "both" === this.options.gestureOrientation ? o2 = Math.abs(i2) > Math.abs(e2) ? i2 : e2 : "horizontal" === this.options.gestureOrientation && (o2 = e2), this.scrollTo(this.targetScroll + o2, { programmatic: false });
    }, this.onScroll = () => {
      if (!this.isScrolling) {
        const t3 = this.animatedScroll;
        this.animatedScroll = this.targetScroll = this.actualScroll, this.velocity = 0, this.direction = Math.sign(this.animatedScroll - t3), this.emit();
      }
    }, t2 && console.warn("Lenis: `direction` option is deprecated, use `orientation` instead"), n2 && console.warn("Lenis: `gestureDirection` option is deprecated, use `gestureOrientation` instead"), l && console.warn("Lenis: `mouseMultiplier` option is deprecated, use `wheelMultiplier` instead"), r && console.warn("Lenis: `smooth` option is deprecated, use `smoothWheel` instead"), window.lenisVersion = "1.0.0", h !== document.documentElement && h !== document.body || (h = window), this.options = { wrapper: h, content: a, smoothWheel: c, smoothTouch: u, duration: m, easing: p, lerp: d, infinite: v, gestureOrientation: S, orientation: g, touchMultiplier: w, wheelMultiplier: f, normalizeWheel: M }, this.wrapper = new s(h), this.content = new s(a), this.rootElement.classList.add("lenis"), this.velocity = 0, this.isStopped = false, this.isSmooth = c || u, this.isScrolling = false, this.targetScroll = this.animatedScroll = this.actualScroll, this.animate = new e(), this.emitter = i(), this.wrapper.element.addEventListener("scroll", this.onScroll, { passive: false }), this.virtualScroll = new o(h, { touchMultiplier: w, wheelMultiplier: f, normalizeWheel: M }), this.virtualScroll.on("scroll", this.onVirtualScroll);
  }
  destroy() {
    this.emitter.events = {}, this.wrapper.element.removeEventListener("scroll", this.onScroll, { passive: false }), this.virtualScroll.destroy();
  }
  on(t2, e2) {
    return this.emitter.on(t2, e2);
  }
  off(t2, e2) {
    var i2;
    this.emitter.events[t2] = null == (i2 = this.emitter.events[t2]) ? void 0 : i2.filter((t3) => e2 !== t3);
  }
  setScroll(t2) {
    this.isHorizontal ? this.rootElement.scrollLeft = t2 : this.rootElement.scrollTop = t2;
  }
  emit() {
    this.emitter.emit("scroll", this);
  }
  reset() {
    this.isLocked = false, this.isScrolling = false, this.velocity = 0;
  }
  start() {
    this.isStopped = false, this.reset();
  }
  stop() {
    this.isStopped = true, this.animate.stop(), this.reset();
  }
  raf(t2) {
    const e2 = t2 - (this.time || t2);
    this.time = t2, this.animate.advance(1e-3 * e2);
  }
  scrollTo(e2, { offset: i2 = 0, immediate: s2 = false, lock: o2 = false, duration: n2 = this.options.duration, easing: l = this.options.easing, lerp: r = !n2 && this.options.lerp, onComplete: h, force: a = false, programmatic: c = true } = {}) {
    if (!this.isStopped || a) {
      if (["top", "left", "start"].includes(e2))
        e2 = 0;
      else if (["bottom", "right", "end"].includes(e2))
        e2 = this.limit;
      else {
        var u;
        let t2;
        if ("string" == typeof e2 ? t2 = document.querySelector(e2) : null != (u = e2) && u.nodeType && (t2 = e2), t2) {
          if (this.wrapper.element !== window) {
            const t3 = this.wrapper.element.getBoundingClientRect();
            i2 -= this.isHorizontal ? t3.left : t3.top;
          }
          const s3 = t2.getBoundingClientRect();
          e2 = (this.isHorizontal ? s3.left : s3.top) + this.animatedScroll;
        }
      }
      if ("number" == typeof e2) {
        if (e2 += i2, e2 = Math.round(e2), this.options.infinite ? c && (this.targetScroll = this.animatedScroll = this.scroll) : e2 = t(0, e2, this.limit), s2)
          return this.animatedScroll = this.targetScroll = e2, this.setScroll(this.scroll), this.animate.stop(), this.reset(), this.emit(), void (null == h || h());
        c || (this.targetScroll = e2), this.animate.fromTo(this.animatedScroll, e2, { duration: n2, easing: l, lerp: r, onUpdate: (t2, { completed: e3 }) => {
          o2 && (this.isLocked = true), this.isScrolling = true, this.velocity = t2 - this.animatedScroll, this.direction = Math.sign(this.velocity), this.animatedScroll = t2, this.setScroll(this.scroll), c && (this.targetScroll = t2), e3 && (o2 && (this.isLocked = false), requestAnimationFrame(() => {
            this.isScrolling = false;
          }), this.velocity = 0, null == h || h()), this.emit();
        } });
      }
    }
  }
  get rootElement() {
    return this.wrapper.element === window ? this.content.element : this.wrapper.element;
  }
  get limit() {
    return Math.round(this.isHorizontal ? this.content.width - this.wrapper.width : this.content.height - this.wrapper.height);
  }
  get isHorizontal() {
    return "horizontal" === this.options.orientation;
  }
  get actualScroll() {
    return this.isHorizontal ? this.rootElement.scrollLeft : this.rootElement.scrollTop;
  }
  get scroll() {
    return this.options.infinite ? function(t2, e2) {
      let i2 = t2 % e2;
      return (e2 > 0 && i2 < 0 || e2 < 0 && i2 > 0) && (i2 += e2), i2;
    }(this.animatedScroll, this.limit) : this.animatedScroll;
  }
  get progress() {
    return this.scroll / this.limit;
  }
  get isSmooth() {
    return this.__isSmooth;
  }
  set isSmooth(t2) {
    this.__isSmooth !== t2 && (this.rootElement.classList.toggle("lenis-smooth", t2), this.__isSmooth = t2);
  }
  get isScrolling() {
    return this.__isScrolling;
  }
  set isScrolling(t2) {
    this.__isScrolling !== t2 && (this.rootElement.classList.toggle("lenis-scrolling", t2), this.__isScrolling = t2);
  }
  get isStopped() {
    return this.__isStopped;
  }
  set isStopped(t2) {
    this.__isStopped !== t2 && (this.rootElement.classList.toggle("lenis-stopped", t2), this.__isStopped = t2);
  }
};
export {
  n as default
};
//# sourceMappingURL=@studio-freight_lenis.js.map
